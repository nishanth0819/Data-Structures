#You are given an array containing N non-negative integers. 
#Your task is to partition this array into two subsets such that the absolute difference between subset sums is minimum.
#You just need to find the minimum absolute difference considering any valid division of the array elements.

#INPUT:
4
1 2 3 4
OUTPUT:
0
We can partition the given array into {2,3} and {1,4}, as this will give us the minimum possible absolute difference i.e (5-5=0) in this case.

#INPUT:
3
8 6 5
OUTPUT:
3
We can partition the given array into {8} and {6,5}, as this will give us the minimum possible absolute difference i.e (11-8=3) in this case


#CODE:
int minSubsetSumDifference(vector<int>& arr, int n)
{
    int sum=0;
    for(int i=0;i<n;i++)
        sum=sum+arr[i];
    vector<vector<int>> dp(n+1,vector<int>(sum+1));
    for(int i=0;i<=n;i++)
        dp[i][0]=true;
    for(int i=1;i<=sum;i++)
        dp[0][i]=false;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=sum;j++)
        {
            if(arr[i-1]>j)
                dp[i][j]=dp[i-1][j];
            else
                dp[i][j]=dp[i-1][j]||dp[i-1][j-arr[i-1]];
        }
    }
    int mini=1e9;
    for(int i=0;i<=sum;i++)
    {
        if(dp[n][i]==true)
            mini=min(mini,abs((sum-i)-i));
    }
    return mini;
        
}
