//The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.
//For example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4.

//Input: nums = [4,2,5,3]
Output: 7
Explanation: It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7.

//Input: nums = [5,6,7,8]
Output: 8
Explanation: It is optimal to choose the subsequence [8] with alternating sum 8.

//RECURSIVE CODE:
int find(vector<int> &nums,int start,int end,int sign)
    {
        int taken=-169,nottaken=-1e9;
        if(start==end)
            return 0;
        if(sign==1)
            taken=nums[start]+find(nums,start+1,end,0);
        else
            taken=(-1)*nums[start]+find(nums,start+1,end,1);
        nottaken=find(nums,start+1,end,sign);
        return max(taken,nottaken);
            
    }
    long long maxAlternatingSum(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return 0;
        return find(nums,0,n,1);
    }
    
    
 //BOTTOM-UP CODE:
 
     long long find(vector<int> &nums,int start,int end,int sign,vector<vector<long long>> &dp)
    {
        long long taken=INT_MIN,nottaken=INT_MIN;
        if(dp[start][sign]!=-1)
            return dp[start][sign];
        if(start==end)
            return 0;
        if(sign==1)
            taken=nums[start]+find(nums,start+1,end,0,dp);
        else
            taken=(-1)*nums[start]+find(nums,start+1,end,1,dp);
        nottaken=find(nums,start+1,end,sign,dp);
        return dp[start][sign]=max(taken,nottaken);
            
    }
    long long maxAlternatingSum(vector<int>& nums) {
        long long n=nums.size();
        vector<vector<long long>> dp(n+1,vector<long long>(2,-1));
        if(n==0)
            return 0;
        return find(nums,0,n,1,dp);
    }
