#You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

#Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

#Input: nums = [1], target = 1
Output: 1
 
 
#CODE:
 int findTargetSumWays(vector<int>& nums, int target) {
       
        int sum = accumulate(nums.begin(),nums.end(),0);
        if(sum < abs(target) or (sum+target)%2!=0) return 0;
        int n = nums.size();
        int targetSum = (sum+target)/2;
        
        vector<vector<int>>dp(n+1,vector<int>(targetSum+1));
        for(int i=0;i<=n;i++)
            dp[i][0]=1;
        for(int i=1;i<=targetSum;i++)
             dp[0][i]=0;
        for(int i = 1 ; i < n+1 ; i++){
            for(int j = 0 ; j < targetSum+1 ; j++){
                if(nums[i-1] <= j){
                    dp[i][j] = dp[i-1][j-nums[i-1]] + dp[i-1][j];
                }
                else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][targetSum];
    }
