#We are given an array/list of ‘N’ integers. 
#We are supposed to return the maximum sum of the subsequence with the constraint that no two elements are adjacent in the given array/list.
I/P:
3
1 2 4
O/P:
5
I/P:
9
1 2 3 1 3 5 8 1 9
O/P:
24

#Recursive Code
int find(int ind,vector<int> &nums)
{
    if(ind==0)
         return nums[0];
     if(ind<0)
         return 0;
     int taken=nums[ind]+find(ind-2,nums);
    int nottaken=find(ind-1,nums);
    return max(taken,nottaken);
}
int maximumNonAdjacentSum(vector<int> &nums){
    return find(nums.size()-1,nums);
}

#BOTOOM-UP APPROACH:
int find(int ind,vector<int> &nums,vector<int> &dp)
{
    if(ind==0)
         return nums[0];
     if(ind<0)
         return 0;
     if(dp[ind]!=-1)
         return dp[ind];
     int taken=nums[ind]+find(ind-2,nums,dp);
    int nottaken=find(ind-1,nums,dp);
    return dp[ind]=max(taken,nottaken);
}
int maximumNonAdjacentSum(vector<int> &nums){
    vector<int> dp(nums.size(),-1);
    return find(nums.size()-1,nums,dp);
 }
 
 #TOP-DOWN APPROACH:
 
 int maximumNonAdjacentSum(vector<int> &nums){
    int dp[nums.size()];
    dp[0]=nums[0];
    for(int i=1;i<nums.size();i++)
    {
        int take=nums[i];
        if(i-2>=0)
            take=take+dp[i-2];
        
        int nottaken=dp[i-1];
        dp[i]=max(take,nottaken);
    }
    return dp[nums.size()-1];
 }
