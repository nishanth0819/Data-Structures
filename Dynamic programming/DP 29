//You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
//Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
//You may assume that you have an infinite number of each kind of coin.

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Input: coins = [2], amount = 3
Output: -1

Input: coins = [1], amount = 0
Output: 0

//RECURSIVE CODE:

int find(vector<int> &coins,int n,int amo)
    {
        
       if(amo==0)
             return 0;
        if(n==0)
            return 1e9;
        if(coins[n-1]>amo)
            return find(coins,n-1,amo);
        else
            return min(1+find(coins,n,amo-coins[n-1]),find(coins,n-1,amo));
        
    }
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        int res=find(coins,n,amount);
        if(res==1e9)
            return -1;
       else
           return res;
    }
    
    
//BOTTOM-UP CODE:

int find(vector<int> &coins,int n,int amo,vector<vector<int>> &dp)
    {
        
       if(amo==0)
             return 0;
        if(n==0)
            return 1e9;
        if(dp[n][amo]!=-1)
            return dp[n][amo];
        if(coins[n-1]>amo)
            return dp[n][amo]=find(coins,n-1,amo,dp);
        else
            return dp[n][amo]=min(1+find(coins,n,amo-coins[n-1],dp),find(coins,n-1,amo,dp));
        
    }
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>> dp(n+1,vector<int>(amount+1,-1));
        int res=find(coins,n,amount,dp);
        if(res==1e9)
            return -1;
       else
           return res;
    }
    
    
  //BOTTOM-UP CODE:
  
   int find(vector<int> &coins,int n,int amo,vector<vector<int>> &dp)
    {
        
       if(amo==0)
             return 0;
        if(n==0)
            return 1e9;
        if(dp[n][amo]!=-1)
            return dp[n][amo];
        if(coins[n-1]>amo)
            return dp[n][amo]=find(coins,n-1,amo,dp);
        else
            return dp[n][amo]=min(1+find(coins,n,amo-coins[n-1],dp),find(coins,n-1,amo,dp));
        
    }
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>> dp(n+1,vector<int>(amount+1,-1));
        int res=find(coins,n,amount,dp);
        if(res==1e9)
            return -1;
       else
           return res;
    }
    
    
//TOP-DOWN CODE:


int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
      int  t[n+1][amount+1];
        for(int i=0;i<=amount;i++)
        {
            t[0][i]=INT_MAX-1;
        }
        for(int i=1;i<=n;i++)
        {
            t[i][0]=0;
        }
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<amount+1;j++)
            {
                if(coins[i-1]<=j)
                {
                  t[i][j]=min(t[i][j-coins[i-1]]+1,t[i-1][j]); 
                }
                else
                    t[i][j]=t[i-1][j];
            }
        }
        if(t[n][amount]==INT_MAX-1)
        {
         return -1;   
        }
        
        
           return t[n][amount];
        
    }
