#Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.
#Input:
A = 6, B = 6
str1 = ABCDGH
str2 = AEDFHR
Output: 3
Explanation: LCS for input Sequences
“ABCDGH” and “AEDFHR” is “ADH” of
length 3.

#Input:
A = 3, B = 2
str1 = ABC
str2 = AC
Output: 2
Explanation: LCS of "ABC" and "AC" is
"AC" of length 2.

#RECURSIVE-CODE:

int lcs(int x, int y, string s1, string s2)
    {
        // your code here
        if(x==0 || y==0)
            return 0;
        else if(s1[x-1]==s2[y-1])
             return 1+lcs(x-1,y-1,s1,s2);
        else
            return max(lcs(x-1,y,s1,s2),lcs(x,y-1,s1,s2));
    }


#BOTTOM-UP CODE:

 int find(int x,int y,string s1,string s2,vector<vector<int>> &dp)
    {
        if(x==0 ||y==0)
           return 0;
        if(dp[x][y]!=-1)
            return dp[x][y];
        if(s1[x-1]==s2[y-1])
            return dp[x][y]=1+find(x-1,y-1,s1,s2,dp);
        else
           return dp[x][y]=max(find(x-1,y,s1,s2,dp),find(x,y-1,s1,s2,dp));
    }
    
    int lcs(int x, int y, string s1, string s2)
    {
        // your code her
        vector<vector<int>> dp(x+1,vector<int>(y+1,-1));
        return find(x,y,s1,s2,dp);
    }
 
 
 TOP-DOWN CODE:
 
 int lcs(int x, int y, string s1, string s2)
    {
        // your code her
        vector<vector<int>> dp(x+1,vector<int>(y+1));
        for(int i=0;i<=x;i++)
        {
            for(int j=0;j<=y;j++)
            {
                if(i==0 ||j==0)
                   dp[i][j]=0;
            }
        }
        for(int i=1;i<=x;i++)
        {
            for(int j=1;j<=y;j++)
            {
                if(s1[i-1]==s2[j-1])
                  dp[i][j]=1+dp[i-1][j-1];
                else
                  dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[x][y];
    }
