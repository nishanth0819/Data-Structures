//You are given an array A of length N consisting of positive integers. 
//Your task is to print the maximum subsequence sum such that no three consecutive elements are taken from array A
//I/P:
4
6 3 3 2
O/P:11
All subsequences sum are:  
6 (A[0]), 3 (A[1]), 3 (A[2]), 2 (A[3]),  9 (A[0] + A[1]), 9 (A[0] + A[2]), 8 (A[0] + A[3]), 6 (A[1] + A[2]), 5 (A[1] + A[3]), 5 *  (A[2] + A[3]), â€¦ 11 (A[0] + A[1] + A[3]), ... 11 (A[0] + A[2] + A[3])

The max sum subsequence without three consecutive elements is 11 ( A[0] + A[1] + A[3]  or A[0] + A[2] + A[3] ).

//I/P:
3
1 1 1 
O/P:2


//RECURSIVE CODE:
int find(int ind,vector<int> &a)
{
    if(ind==0)
        return a[ind];
    int taken1=a[ind]+a[ind-1];
    if(ind-3>=0)
         taken1=taken1+find(ind-3,a);
    int taken2=a[ind];
    if(ind-2>=0)
        taken2=taken2+find(ind-2,a);
    int nottaken=find(ind-1,a);
    return max(taken1,max(taken2,nottaken));
}
int maxSum(vector<int> &a, int n) 
{
    
    return find(n-1,a);
}

//BOTTOM-UP CODE:
int find(int ind,vector<int> &a,vector<int> &dp)
{
    if(ind==0)
        return a[ind];
    if(dp[ind]!=-1)
        return dp[ind];
    int taken1=a[ind]+a[ind-1];
    if(ind-3>=0)
         taken1=taken1+find(ind-3,a,dp);
    int taken2=a[ind];
    if(ind-2>=0)
        taken2=taken2+find(ind-2,a,dp);
    int nottaken=find(ind-1,a,dp);
    return dp[ind]=max(taken1,max(taken2,nottaken));
}
int maxSum(vector<int> &a, int n) 
{
    vector<int> dp(n+1,-1);
    return find(n-1,a,dp);
}


//TOP-DOWN CODE:

int maxSum(vector<int> &a, int n) 
{
    vector<int> dp(n);
    dp[0]=a[0];
    for(int i=1;i<n;i++)
    {
        int take1=a[i]+a[i-1];
        if(i-3>=0)
            take1=take1+dp[i-3];
        int take2=a[i];
        if(i-2>=0)
            take2=take2+dp[i-2];
        int nottake=dp[i-1];
        dp[i]=max(take1,max(take2,nottake));
    }
    return dp[n-1];
}
