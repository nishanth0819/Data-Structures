#A message containing letters from A-Z can be encoded into numbers using the following mapping:
'A' -> "1"
'B' -> "2"
...
'Z' -> "26"

#To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). 
#For example, "11106" can be mapped into:
"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Input: s = "12"
Output: 2
Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).

Input: s = "226"
Output: 3
Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

#CODE:
    int find(string s,int index,unordered_map<int,int> &mp)
   {
    int first=0,second=0;
    if(s[0]=='0')
        return 0;
    if(index<0)
       return 1;
    auto it=mp.find(index);
    if(it!=mp.end())
        return it->second;
    if(s[index]>='1')
         first=find(s,index-1,mp);
    if(index-1>=0)
    {
    if(s[index-1]=='1'||(s[index-1]=='2'&& s[index]<='6'))
         second=find(s,index-2,mp);
    }
     return mp[index]=first+second;
     }
    
    int numDecodings(string s) {
        unordered_map<int,int> mp;
        return find(s,s.length()-1,mp);
        
    }
