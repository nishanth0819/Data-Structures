#Given a m x n grid filled with non-negative numbers,
#find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

#Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

#Input: grid = [[1,2,3],[4,5,6]]
Output: 12

#RECURSION:

int find(int i,int j,vector<vector<int>> &grid)
    {
        if(i==0 && j==0)
            return grid[0][0];
        if(i<0 || j<0)
            return 1e9;
        int up=grid[i][j]+find(i-1,j,grid);    
        int left=grid[i][j]+find(i,j-1,grid);
        return min(up,left);
    }
int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        return find(m-1,n-1,grid);
  }
  
#BOTTOM-UP:

    int find(int i,int j,vector<vector<int>> &grid,vector<vector<int>> &dp)
    {
        if(i==0 && j==0)
            return grid[0][0];
        if(i<0 || j<0)
            return 1e9;
        if(dp[i][j]!=-1)
            return dp[i][j];
        int up=grid[i][j]+find(i-1,j,grid,dp);    
        int left=grid[i][j]+find(i,j-1,grid,dp);
        return dp[i][j]=min(up,left);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return find(m-1,n-1,grid,dp);
     }


#TOP-DOWN

  int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0 && j==0)
                    dp[i][j]=grid[0][0];
                else
                {
                int up=1e9,left=1e9;
                if(i-1>=0)
                    up=dp[i-1][j];
                if(j-1>=0)
                    left=dp[i][j-1];
                dp[i][j]=grid[i][j]+min(up,left);
                }
            }
        }
        return dp[m-1][n-1];
     }
