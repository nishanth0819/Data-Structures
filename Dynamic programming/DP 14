#Given a gold mine of n*m dimensions. Each field in this mine contains a positive integer which is the amount of gold in tons. 
#Initially the miner is at first column but can be at any row. He can move only (right->,right up /,right down\) that is from a given cell, 
#the miner can move to the cell diagonally up towards the right or right or diagonally down towards the right.
# Find out maximum amount of gold he can collect. 

#Input : mat[][] = {{1, 3, 3},
                   {2, 1, 4},
                  {0, 6, 4}};
Output : 12 
{(1,0)->(2,1)->(1,2)}

#Input: mat[][] = { {1, 3, 1, 5},
                   {2, 2, 4, 1},
                   {5, 0, 2, 3},
                   {0, 6, 1, 2}};
Output : 16
(2,0) -> (1,1) -> (1,2) -> (0,3) OR
(2,0) -> (3,1) -> (2,2) -> (2,3)

#Input : mat[][] = {{10, 33, 13, 15},
                  {22, 21, 04, 1},
                  {5, 0, 2, 3},
                  {0, 6, 14, 2}};
Output : 83

#RECURSIVE CODE:
int solveg(int i,int j,vector<vector<int>> mat,int n)
{
    
    if(j==n-1)
         return mat[i][j];
    if(i==0)
        return mat[i][j]+max(solveg(i,j+1,mat,n),solveg(i+1,j+1,mat,n));
    if(i==n-1)
         return mat[i][j]+max(solveg(i-1,j+1,mat,n),solveg(i,j+1,mat,n));
    else
         return mat[i][j]+max(solveg(i-1,j+1,mat,n),max(solveg(i,j+1,mat,n),solveg(i+1,j+1,mat,n)));
        
}
void f(vector<vector<int>> &mat)
{
    int n=mat.size();
    int max=-999;
    for(int i=0;i<n;i++)
    {
          int val=solveg(i,0,mat,n);
          if(val>max)
            max=val;
    }
    cout<<max;
}


#BOTTOM UP CODE:

int solveg(int i,int j,vector<vector<int>> mat,int n,vector<vector<int>> dp)
{
    
    if(j==n-1)
         return dp[i][j]=mat[i][j];
    if(dp[i][j]!=-1)
       return dp[i][j];
    if(i==0)
        return dp[i][j]=mat[i][j]+max(solveg(i,j+1,mat,n,dp),solveg(i+1,j+1,mat,n,dp));
    if(i==n-1)
         return dp[i][j]=mat[i][j]+max(solveg(i-1,j+1,mat,n,dp),solveg(i,j+1,mat,n,dp));
    else
         return dp[i][j]=mat[i][j]+max(solveg(i-1,j+1,mat,n,dp),max(solveg(i,j+1,mat,n,dp),solveg(i+1,j+1,mat,n,dp)));
        
}
void f(vector<vector<int>> &mat)
{
    int n=mat.size();
    int max=-999;
    for(int i=0;i<n;i++)
    {
        vector<vector<int>> dp(n,vector<int>(n,-1));
          int val=solveg(i,0,mat,n,dp);
          if(val>max)
            max=val;
    }
    cout<<max;
}


#TOP-DOWN CODE:

int solveg1(int n,vector<vector<int>> mat)
{
    vector<vector<int>> dp(n+1,vector<int>(n+1,0));
    int ans=0;
    for(int j=n-1;j>=0;j--)
    {
        for(int i=0;i<n;i++)
        {
            if(j==n-1)
               dp[i][j]=mat[i][j];
            if(i==0)
                dp[i][j]=mat[i][j]+max(dp[i][j+1],dp[i+1][j+1]);
            if(i==n-1)
                dp[i][j]=mat[i][j]+max(dp[i-1][j+1],dp[i][j+1]);
            else
               dp[i][j]=mat[i][j]+max(dp[i-1][j+1],max(dp[i][j+1],dp[i+1][j+1]));
        }
    }
    for(int i = 0; i<n; i++)
            ans = max(ans, dp[i][0]);
    return ans;
}
void f(vector<vector<int>> mat)
{
    int n=mat.size();
    cout<< solveg1(n,mat);
}
