#Given a ‘N’ * ’M’ maze with obstacles, count and return the number of paths to reach the right-bottom cell from the top-left cell. 
#A cell in the given maze has a value -1 if it is a blockage or dead-end, else 0.
#From a given cell, we are allowed to move to cells (i+1, j) and (i, j+1) 

#Consider the maze below :
0 0 0 
0 -1 0 
0 0 0

There are two ways to reach the bottom left corner - 

(1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3)
(1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3)

Hence the answer for the above test case is 2.


#I/P:
2 2
0 -1
-1  0
O/P:
0

#RECURSIVE CODE:
int mod=(int)(1e9 + 7);
int f(int i,int j,vector<vector<int>> &mat)
{
    if((i==0 && j==0) && mat[i][j]!=-1)
        return 1;
    if(i<0 ||j<0)
        return 0;
    if(mat[i][j]==-1)
        return 0;
    int up=f(i-1,j,mat);
    int left=f(i,j-1,mat);
    return (up+left)%mod;
}
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
        return f(n-1,m-1,mat);
}

#BOTTOM-UP CODE:

int mod=(int)(1e9 + 7);
int f(int i,int j,vector<vector<int>> &mat,vector<vector<int>> &dp)
{
    if((i==0 && j==0) && mat[i][j]!=-1)
        return 1;
    if(i<0 ||j<0)
        return 0;
    if(mat[i][j]==-1)
        return 0;
    if(dp[i][j]!=-1)
        return dp[i][j];
    int up=f(i-1,j,mat,dp);
    int left=f(i,j-1,mat,dp);
    return dp[i][j]=(up+left)%mod;
}
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
   vector<vector<int>> dp(n,vector<int>(m,-1));
        return f(n-1,m-1,mat,dp);
}

#TOP-DOWN CODE:
int mod=(int)(1e9 + 7);
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
   vector<vector<int>> dp(n,vector<int>(m,-1));
   for(int i=0;i<n;i++)
   {
       for(int j=0;j<m;j++)
       {
           if((i==0&&j==0) && mat[i][j]!=-1)
               dp[i][j]=1;
           else if(mat[i][j]==-1)
               dp[i][j]=0;
           else
           {
               int up=0,left=0;
               if(i-1>=0)
                   up=dp[i-1][j];
               if(j-1>=0)
                   left=dp[i][j-1];
               dp[i][j]=(up+left)%mod;
           }
      }
   }
    return dp[n-1][m-1];
}

