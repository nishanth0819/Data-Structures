//A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.
//INPUT:
3 8
2 3 5  
OUTPUT:
0

//Test Case 1: The given array is [2,3,5]. 
All the possible subsequences of this array are {2}, {3}, {5}, {2,3}, {2,5}, {3,5}, {2,3,5}. 
But product of elements of subsequence {2,5}, {3,5}, {2,3,5} is more than p i.e 8. Therefore required count is 4.

//INPUT:
5 6
2 7 3 6 1
OUTPUT:
9
//RECURSION:
int find(vector<int> &arr,int pro,int k,int n,vector<vector<int>> &dp)
{
    if(n==0 && pro>=k)
       return 1;
    if(pro<k || n==0)
        return 0;
    if(dp[n][pro/arr[n-1]]!=-1)
        return dp[n][pro/arr[n-1]];
    if(arr[n-1]>pro)
        return dp[n][pro/arr[n-1]]=find(arr,pro,k,n-1,dp);
    else
      return dp[n][pro/arr[n-1]]=find(arr,pro,k*arr[n-1],n-1,dp)+find(arr,pro,k,n-1,dp);
}

int countSubsequences(vector < int > & a, int n, int p) {
    int k=1;
    vector<vector<int>> dp(n+1,vector<int>(p+1,-1));
    return find(a,p,k,n,dp)-1;
}



//BOTTOM-UP CODE:

int find(vector<int> &arr,int pro,int k,int n,vector<vector<int>> &dp)
{
    if(n==0 && pro>=k)
       return 1;
    if(pro<k || n==0)
        return 0;
    if(dp[n][k]!=-1)
        return dp[n][k];
    if(arr[n-1]>pro)
        return dp[n][k]=find(arr,pro,k,n-1,dp);
    else
      return dp[n][k]=find(arr,pro,k*arr[n-1],n-1,dp)+find(arr,pro,k,n-1,dp);
}
int countSubsequences(vector < int > & a, int n, int p) {
    int k=1;
    vector<vector<int>> dp(n+1,vector<int>(p+1,-1));
    return find(a,p,k,n,dp)-1;
}
